apply plugin: 'com.android.application'

import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "io.github.jitinsharma.offlineairportapi"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile project(':library')
}

task transformJson {
    doLast {
        def path = "app/src/main/assets/airports_2.json"
        def file = new File(path)
        def transformedFile = new File("app/src/main/assets/transformed.json")
        def finalJson = new JsonBuilder()
        Map<String, String> map = new HashMap<>()
        if (file.exists()) {
            def json = new JsonSlurper().parseText(file.text)
            json.each {key, value ->
                map.put(value.lat + ',' + value.lon, value)
            }
            finalJson(map)
            transformedFile.write(finalJson.toPrettyString())
        }
        else {
            println "file not found"
        }
    }
}
